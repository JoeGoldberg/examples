{
  "Defaults" : {
    "RunAs" : "ctmagent", "Application": "jog", "SubApplication" : "serverless",
    "ActiveRetentionPolicy" : "CleanEndedOK",
    "Description" : "Manage serverless job execution using AWS resources",
    "ControlmServer":"smprod", "OrderMethod": "Automatic",  
    "Host": "awscliagents"
  },

  "jog-serverless-master" : {"Type" : "Folder", 
    "SiteStandard" : "jog",

    "jog-sless-request-watcher" : {"Type" : "Job:EmbeddedScript",
      "Comment": "Watch for jobs in Wait Host status and check if dynamic resources should be provisioned",
      "Script" : "#!/bin/bash\\n\\nget-hostgroup(){\\n#   Fetch hostgroup attributes. If not found, the host being waited on, is not \"serverless\"\\n\\n#   Definition for a \"dynamic hostgroup\"\\n#   Name:               hostgroup name specified in job definitions (slesshg array)\\n#   Jobname:            The job that will manage the creation and termination of the hostgroup\\n#                       jog-sless-aws:  define an auto-scale group pointing to AMI that will\\n#                                       connect to environment described in its tags\\n#                       jog-sless-wp:   Activate a workload policy that will shift jobs requesting\\n#                                       this hostgroup onto another, as determined in that job\\n#\\n\\n    hgn=${1}\\n\\n    slesshg=`ctm run events::get -s \"server=smprod&name=jog-sless-hostgroup-name*\" | jq -r .[].name | cut -d \":\" -f 2`\\n    jobtorun=\"\"\\n    # use for loop to read all values and indexes\\n    for hg in ${slesshg};\\n    do\\n      if [ ${hgn} == ${hg} ]\\n      then\\n         echo Our hostgroup is ${hg}\\n         jobtorun=`ctm run events::get -s \"server=smprod&name=jog-sless-hostgroup-folder-${hg}:*\" | jq -r .[].name | cut -d \":\" -f 2`\\n         echo Folder to run is ${jobtorun}\\n         return\\n      fi\\n    done\\n\\n}\\n\\nCheckStop() {\\n# If \"stop\" condition set, delete \"running\" condition and terminate\\n   stopevent=`ctm run events::get -s \"server=smprod&name=ctm-serverless-hostgroup-stop\" | jq -r .[].name`\\n   if [ -z \"$stopevent\" ]\\n    then\\n                return\\n    else\\n        echo `date  +\"%Y-%m-%d-%T\"` Received \\\"stop\\\" event\\n                ctm run event::delete smprod ctm-serverless-hostgroup-stop NoDate\\n                ctm run event::delete smprod ctm-serverless-hostgroup-running NoDate\\n                echo `date  +\"%Y-%m-%d-%T\"` Processed \\\"stop\\\" event\\n        exit 0\\n    fi\\n}\\n\\nCheckRunning() {\\n#       if \"running\" is null (false) then OK to proceed. Otherwise, set \"stop\" request and wait until \"running\" disappears.\\n        runevent=\"loopstarter\"\\n        while [[ ! -z \"$runevent\" ]]\\n        do\\n                runevent=`ctm run events::get -s \"server=smprod&name=ctm-serverless-hostgroup-running\" | jq -r .[].name`\\n                if [ -z \"$runevent\" ];\\n                then\\n                        echo `date  +\"%Y-%m-%d-%T\"` Adding \\\"running\\\" event\\n                        ctm run event::add smprod ctm-serverless-hostgroup-running NoDate\\n                        if [[ $? != 0 ]];\\n                        then\\n                           echo Error occurred trying to add running indicator\\n                           exit 128\\n                        fi \\n                else\\n                        echo `date  +\"%Y-%m-%d-%T\"` Adding \\\"stop\\\" event to request third-party shutdown\\n                        ctm run event::add smprod ctm-serverless-hostgroup-stop NoDate\\n                        sleep 30\\n        fi\\n        done\\n}\\n\\n\\n\\nrun-job(){\\n    #\\n    #   Check event to ensure another instance of this workflow is not running\\n    #   Set the event to indicate our instance is running\\n    #   Submit the flow\\n    #\\n    foldertorun=${1}\\n    jobstatus=`ctm run events::get -s \"server=smprod&name=${foldertorun}-running&date=NoDate\" | jq -r .[].name`\\n    if [ -z \"$jobstatus\" ];\\n    then\\n        ctm run event::add smprod ${foldertorun}-running NoDate\\n        ctm run order smprod ${foldertorun}\\n    fi\\n    return\\n\\n}\\n\\nCheckRunning            #       Check for another instance\\necho Start main\\n#       Main Loop\\nwhile true \\ndo\\n        CheckStop               #       Check end-of-day shutdown request\\n        #       FInd any jobs waiting for hosts\\n        numjobs=`ctm run jobs:status::get -s \"server=*&status=Wait Host&deleted=False\" | jq -r .returned`\\n        if [[ $numjobs != 0 ]];\\n        then\\n           hosts=`ctm run jobs:status::get -s \"server=*&status=Wait Host&deleted=False\" | jq -r .statuses[].host`\\n           for host in $hosts;\\n           do\\n           if [ ! -z \"$host\" ];\\n           then\\n                echo \"Checking host: ${host}\"\\n                get-hostgroup ${host}\\n                if [ ! -z \"$jobtorun\" ]\\n                then\\n                   run-job $jobtorun\\n                fi\\n           fi\\n           done\\n        fi\\n        sleep 15\\ndone",
      "FileName" : "sless-master.sh"
    }
  }
}